<div class="row">
    <div class="col-12">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/dashboard">Dashboard</a></li>
                <li class="breadcrumb-item active">Play Comparison</li>
            </ol>
        </nav>
        
        <h1 class="mb-4">
            <i class="fas fa-balance-scale me-2"></i>
            Play Comparison Tool
        </h1>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="card-title mb-0">
                    <i class="fas fa-book me-2"></i>
                    Play 1
                </h5>
            </div>
            <div class="card-body">
                <label for="play1Select" class="form-label">Select First Play:</label>
                <select class="form-select" id="play1Select" onchange="loadComparison()">
                    <option value="">Choose a play...</option>
                    <% @plays.each_with_index do |(url, name), index| %>
                        <option value="<%= index %>"><%= name %></option>
                    <% end %>
                </select>
                <div id="play1Info" class="mt-3" style="display: none;">
                    <div class="row">
                        <div class="col-6">
                            <small class="text-muted">Characters:</small>
                            <div class="fw-bold" id="play1Characters">-</div>
                        </div>
                        <div class="col-6">
                            <small class="text-muted">Total Lines:</small>
                            <div class="fw-bold" id="play1Lines">-</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-success text-white">
                <h5 class="card-title mb-0">
                    <i class="fas fa-book me-2"></i>
                    Play 2
                </h5>
            </div>
            <div class="card-body">
                <label for="play2Select" class="form-label">Select Second Play:</label>
                <select class="form-select" id="play2Select" onchange="loadComparison()">
                    <option value="">Choose a play...</option>
                    <% @plays.each_with_index do |(url, name), index| %>
                        <option value="<%= index %>"><%= name %></option>
                    <% end %>
                </select>
                <div id="play2Info" class="mt-3" style="display: none;">
                    <div class="row">
                        <div class="col-6">
                            <small class="text-muted">Characters:</small>
                            <div class="fw-bold" id="play2Characters">-</div>
                        </div>
                        <div class="col-6">
                            <small class="text-muted">Total Lines:</small>
                            <div class="fw-bold" id="play2Lines">-</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="comparisonResults" style="display: none;">
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">Character Count</h5>
                    <canvas id="characterCountChart" width="200" height="200"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">Total Lines</h5>
                    <canvas id="totalLinesChart" width="200" height="200"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title">Avg Lines per Character</h5>
                    <canvas id="avgLinesChart" width="200" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-users me-2"></i>
                        Top Characters Comparison
                    </h5>
                </div>
                <div class="card-body">
                    <canvas id="topCharactersChart" width="400" height="300"></canvas>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-table me-2"></i>
                        Detailed Comparison
                    </h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Metric</th>
                                    <th class="text-primary" id="play1Name">Play 1</th>
                                    <th class="text-success" id="play2Name">Play 2</th>
                                    <th>Difference</th>
                                </tr>
                            </thead>
                            <tbody id="comparisonTable">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-chart-line me-2"></i>
                        Character Distribution Analysis
                    </h5>
                </div>
                <div class="card-body">
                    <canvas id="distributionChart" width="800" height="400"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-tools me-2"></i>
                        Comparison Tools
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <button class="btn btn-outline-primary w-100" onclick="exportComparison()">
                                <i class="fas fa-download me-2"></i>
                                Export Comparison
                            </button>
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-outline-info w-100" onclick="generateComparisonReport()">
                                <i class="fas fa-file-alt me-2"></i>
                                Generate Report
                            </button>
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-outline-success w-100" onclick="shareComparison()">
                                <i class="fas fa-share me-2"></i>
                                Share Results
                            </button>
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-outline-warning w-100" onclick="resetComparison()">
                                <i class="fas fa-refresh me-2"></i>
                                Reset
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="loadingComparison" style="display: none;">
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading comparison...</span>
        </div>
        <p class="mt-2">Analyzing plays for comparison...</p>
    </div>
</div>

<div id="noComparison" class="text-center text-muted">
    <i class="fas fa-balance-scale fa-4x mb-4"></i>
    <h4>Select Two Plays to Compare</h4>
    <p>Choose plays from the dropdowns above to see detailed comparison analysis</p>
</div>

<script>
let comparisonData = null;
let charts = {};

// Load comparison data
function loadComparison() {
    const play1Index = document.getElementById('play1Select').value;
    const play2Index = document.getElementById('play2Select').value;
    
    if (!play1Index || !play2Index || play1Index === play2Index) {
        hideComparison();
        return;
    }
    
    showLoading();
    
    fetch(`/api/compare/${play1Index}/${play2Index}`)
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                alert('Error loading comparison: ' + data.error);
                hideComparison();
            } else {
                comparisonData = data;
                displayComparison(data);
            }
        })
        .catch(error => {
            alert('Error loading comparison: ' + error.message);
            hideComparison();
        });
}

// Show loading state
function showLoading() {
    document.getElementById('noComparison').style.display = 'none';
    document.getElementById('comparisonResults').style.display = 'none';
    document.getElementById('loadingComparison').style.display = 'block';
}

// Hide comparison
function hideComparison() {
    document.getElementById('loadingComparison').style.display = 'none';
    document.getElementById('comparisonResults').style.display = 'none';
    document.getElementById('noComparison').style.display = 'block';
    document.getElementById('play1Info').style.display = 'none';
    document.getElementById('play2Info').style.display = 'none';
}

// Display comparison results
function displayComparison(data) {
    document.getElementById('loadingComparison').style.display = 'none';
    document.getElementById('noComparison').style.display = 'none';
    document.getElementById('comparisonResults').style.display = 'block';
    
    // Update play info
    updatePlayInfo('play1', data.play1);
    updatePlayInfo('play2', data.play2);
    
    // Update table headers
    document.getElementById('play1Name').textContent = data.play1.name;
    document.getElementById('play2Name').textContent = data.play2.name;
    
    // Create charts
    createComparisonCharts(data);
    
    // Update comparison table
    updateComparisonTable(data);
}

// Update play info
function updatePlayInfo(playId, playData) {
    document.getElementById(`${playId}Info`).style.display = 'block';
    document.getElementById(`${playId}Characters`).textContent = playData.analysis.total_characters || 0;
    document.getElementById(`${playId}Lines`).textContent = playData.analysis.total_lines || 0;
}

// Create comparison charts
function createComparisonCharts(data) {
    const play1 = data.play1.analysis;
    const play2 = data.play2.analysis;
    
    // Character count chart
    createPieChart('characterCountChart', 
        [data.play1.name, data.play2.name],
        [play1.total_characters || 0, play2.total_characters || 0],
        ['#007bff', '#28a745']
    );
    
    // Total lines chart
    createPieChart('totalLinesChart',
        [data.play1.name, data.play2.name],
        [play1.total_lines || 0, play2.total_lines || 0],
        ['#007bff', '#28a745']
    );
    
    // Average lines per character
    const avg1 = play1.total_characters ? Math.round(play1.total_lines / play1.total_characters) : 0;
    const avg2 = play2.total_characters ? Math.round(play2.total_lines / play2.total_characters) : 0;
    
    createPieChart('avgLinesChart',
        [data.play1.name, data.play2.name],
        [avg1, avg2],
        ['#007bff', '#28a745']
    );
    
    // Top characters comparison
    createTopCharactersChart(data);
    
    // Distribution chart
    createDistributionChart(data);
}

// Create pie chart
function createPieChart(canvasId, labels, data, colors) {
    const ctx = document.getElementById(canvasId).getContext('2d');
    
    if (charts[canvasId]) {
        charts[canvasId].destroy();
    }
    
    charts[canvasId] = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: labels,
            datasets: [{
                data: data,
                backgroundColor: colors
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });
}

// Create top characters chart
function createTopCharactersChart(data) {
    const ctx = document.getElementById('topCharactersChart').getContext('2d');
    
    if (charts.topCharactersChart) {
        charts.topCharactersChart.destroy();
    }
    
    const play1Top = (data.play1.analysis.characters_lines || []).slice(0, 5);
    const play2Top = (data.play2.analysis.characters_lines || []).slice(0, 5);
    
    const allCharacters = [...new Set([
        ...play1Top.map(([name, _]) => name),
        ...play2Top.map(([name, _]) => name)
    ])];
    
    const play1Data = allCharacters.map(char => {
        const found = play1Top.find(([name, _]) => name === char);
        return found ? found[1] : 0;
    });
    
    const play2Data = allCharacters.map(char => {
        const found = play2Top.find(([name, _]) => name === char);
        return found ? found[1] : 0;
    });
    
    charts.topCharactersChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: allCharacters,
            datasets: [{
                label: data.play1.name,
                data: play1Data,
                backgroundColor: 'rgba(0, 123, 255, 0.8)'
            }, {
                label: data.play2.name,
                data: play2Data,
                backgroundColor: 'rgba(40, 167, 69, 0.8)'
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

// Create distribution chart
function createDistributionChart(data) {
    const ctx = document.getElementById('distributionChart').getContext('2d');
    
    if (charts.distributionChart) {
        charts.distributionChart.destroy();
    }
    
    const play1Lines = (data.play1.analysis.characters_lines || []).map(([_, lines]) => lines);
    const play2Lines = (data.play2.analysis.characters_lines || []).map(([_, lines]) => lines);
    
    charts.distributionChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: Array.from({length: Math.max(play1Lines.length, play2Lines.length)}, (_, i) => i + 1),
            datasets: [{
                label: data.play1.name,
                data: play1Lines,
                borderColor: '#007bff',
                backgroundColor: 'rgba(0, 123, 255, 0.1)',
                fill: false
            }, {
                label: data.play2.name,
                data: play2Lines,
                borderColor: '#28a745',
                backgroundColor: 'rgba(40, 167, 69, 0.1)',
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Character Rank'
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: 'Lines Spoken'
                    },
                    beginAtZero: true
                }
            }
        }
    });
}

// Update comparison table
function updateComparisonTable(data) {
    const play1 = data.play1.analysis;
    const play2 = data.play2.analysis;
    
    const metrics = [
        {
            name: 'Total Characters',
            play1: play1.total_characters || 0,
            play2: play2.total_characters || 0
        },
        {
            name: 'Total Lines',
            play1: play1.total_lines || 0,
            play2: play2.total_lines || 0
        },
        {
            name: 'Avg Lines/Character',
            play1: play1.total_characters ? Math.round(play1.total_lines / play1.total_characters) : 0,
            play2: play2.total_characters ? Math.round(play2.total_lines / play2.total_characters) : 0
        }
    ];
    
    let tableHtml = '';
    metrics.forEach(metric => {
        const diff = metric.play2 - metric.play1;
        const diffClass = diff > 0 ? 'text-success' : diff < 0 ? 'text-danger' : 'text-muted';
        const diffIcon = diff > 0 ? '↑' : diff < 0 ? '↓' : '=';
        
        tableHtml += `
            <tr>
                <td><strong>${metric.name}</strong></td>
                <td class="text-primary">${metric.play1}</td>
                <td class="text-success">${metric.play2}</td>
                <td class="${diffClass}">${diffIcon} ${Math.abs(diff)}</td>
            </tr>
        `;
    });
    
    document.getElementById('comparisonTable').innerHTML = tableHtml;
}

// Export comparison
function exportComparison() {
    if (!comparisonData) return;
    
    const blob = new Blob([JSON.stringify(comparisonData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'play_comparison.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

// Generate comparison report
function generateComparisonReport() {
    alert('Comparison report generation will be implemented in the Reports tab!');
}

// Share comparison
function shareComparison() {
    if (!comparisonData) return;
    
    const url = window.location.href + `?play1=${document.getElementById('play1Select').value}&play2=${document.getElementById('play2Select').value}`;
    navigator.clipboard.writeText(url).then(() => {
        alert('Comparison URL copied to clipboard!');
    });
}

// Reset comparison
function resetComparison() {
    document.getElementById('play1Select').value = '';
    document.getElementById('play2Select').value = '';
    hideComparison();
    
    // Destroy all charts
    Object.values(charts).forEach(chart => chart.destroy());
    charts = {};
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    // Check for URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const play1 = urlParams.get('play1');
    const play2 = urlParams.get('play2');
    
    if (play1 && play2) {
        document.getElementById('play1Select').value = play1;
        document.getElementById('play2Select').value = play2;
        loadComparison();
    }
});
</script>
